name: Flask Application CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Шаг 1: Подготовка окружения (используем v4 для всех actions)
      - uses: actions/checkout@v4

      # Шаг 2: Установка Python (обновленная версия)
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flaskapp/requirements.txt
          pip install pytest pytest-cov

      # Шаг 4: Unit-тесты
      - name: Run unit tests
        working-directory: ./flaskapp
        run: pytest tests/unit/ -v --cov=.

      # Шаг 5: Интеграционные тесты
      - name: Run integration tests
        working-directory: ./flaskapp
        env:
          FLASK_ENV: testing
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
        run: |
          ./st.sh > integration.log 2>&1 || TEST_FAILED=$?
          cat integration.log
          [ -z "${TEST_FAILED}" ] || exit $TEST_FAILED

      # Шаг 6: Загрузка логов (обновленная версия upload-artifact)
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            flaskapp/integration.log
            flaskapp/gunicorn.log
            flaskapp/gunicorn.error.log

      # Шаг 7: Деплой (если нужно)
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/main'
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git
          git push heroku main