name: Flask Application CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Ограничение времени выполнения

    steps:
      # Шаг 1: Подготовка окружения
      - uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'  # Кэширование зависимостей

      # Шаг 2: Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flaskapp/requirements.txt
          pip install pytest pytest-cov  # Для тестов

      # Шаг 3: Запуск unit-тестов
      - name: Run unit tests
        working-directory: ./flaskapp
        run: |
          pytest tests/unit/ -v --cov=.

      # Шаг 4: Интеграционное тестирование
      - name: Run integration tests
        working-directory: ./flaskapp
        env:
          FLASK_ENV: testing
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
        run: |
          # Запуск сервера и клиента с полным логированием
          ./st.sh > integration.log 2>&1 || TEST_FAILED=$?
          
          # Анализ результатов
          cat integration.log
          
          if grep -q "Client error:" integration.log; then
            echo "::error::Client test failed"
            exit 1
          fi
          
          [ -z "${TEST_FAILED}" ] || exit $TEST_FAILED

      # Шаг 5: Артефакты для отладки (если тесты упали)
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: server-logs
          path: |
            flaskapp/integration.log
            flaskapp/gunicorn.log
            flaskapp/gunicorn.error.log

      # Шаг 6: Деплой (пример для Heroku)
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/main'
        run: |
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
          git push heroku main